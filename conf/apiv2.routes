# Project API
POST    /project                                    @org.maproulette.controllers.api.ProjectController.create
POST    /projects                                   @org.maproulette.controllers.api.ProjectController.batchUploadPost
PUT     /project/:id                                @org.maproulette.controllers.api.ProjectController.update(id:Long)
PUT     /projects                                   @org.maproulette.controllers.api.ProjectController.batchUploadPut
GET     /project/:id                                @org.maproulette.controllers.api.ProjectController.read(id:Long)
GET     /projectByName/:name                        @org.maproulette.controllers.api.ProjectController.readByName(id:Long ?= (-1), name:String)
DELETE  /project/:id                                @org.maproulette.controllers.api.ProjectController.delete(id:Long)
GET     /projects/find                              @org.maproulette.controllers.api.ProjectController.find(q:String ?= "", parentId:Long ?= (-1), limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= true)
GET     /projects                                   @org.maproulette.controllers.api.ProjectController.list(limit:Int ?= 10, page:Int ?= 0)
GET     /project/:id/challenges                     @org.maproulette.controllers.api.ProjectController.listChildren(id:Long, limit:Int ?= 10, page:Int ?= 0)
POST    /project/:id/challenges                     @org.maproulette.controllers.api.ProjectController.createChildren(id:Long)
PUT     /project/:id/challenges                     @org.maproulette.controllers.api.ProjectController.updateChildren(id:Long)
GET     /project/:id/children                       @org.maproulette.controllers.api.ProjectController.expandedList(id:Long, limit:Int ?= 10, page:Int ?= 0)
GET     /project/:id/tasks                          @org.maproulette.controllers.api.ProjectController.getRandomTasks(id:Long, cs:String ?= "", ct:String ?= "", tags:String ?= "", s:String ?= "", limit:Int ?= 1)
# Challenge API
POST    /challenge                                  @org.maproulette.controllers.api.ChallengeController.create
POST    /challenges                                 @org.maproulette.controllers.api.ChallengeController.batchUploadPost
PUT     /challenge/:id                              @org.maproulette.controllers.api.ChallengeController.update(id:Long)
PUT     /challenges                                 @org.maproulette.controllers.api.ChallengeController.batchUploadPut
GET     /challenge/:id                              @org.maproulette.controllers.api.ChallengeController.read(id:Long)
GET     /project/:id/challenge/:name                @org.maproulette.controllers.api.ChallengeController.readByName(id:Long, name:String)
GET     /challengeOrSurvey/:id                      @org.maproulette.controllers.api.ChallengeController.getChallenge(id:Long)
DELETE  /challenge/:id                              @org.maproulette.controllers.api.ChallengeController.delete(id:Long)
GET     /challenges/find                            @org.maproulette.controllers.api.ChallengeController.find(q:String ?= "", parentId:Long ?= (-1), limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= true)
GET     /challenge/:id/tags                         @org.maproulette.controllers.api.ChallengeController.getTagsForChallenge(id:Long)
GET     /challenges/tags                            @org.maproulette.controllers.api.ChallengeController.getItemsBasedOnTags(tags:String ?= "", limit:Int ?= 10, page:Int ?= 0)
DELETE  /challenge/:id/tags                         @org.maproulette.controllers.api.ChallengeController.deleteTagsFromItem(id:Long, tags:String ?= "")
GET     /challenges                                 @org.maproulette.controllers.api.ChallengeController.list(limit:Int ?= 10, page:Int ?= 0)
GET     /challenge/:id/tasks                        @org.maproulette.controllers.api.ChallengeController.listChildren(id:Long, limit:Int ?= 10, page:Int ?= 0)
POST    /challenge/:id/tasks                        @org.maproulette.controllers.api.ChallengeController.createChildren(id:Long)
PUT     /challenge/:id/tasks                        @org.maproulette.controllers.api.ChallengeController.updateChildren(id:Long)
GET     /challenge/:id/children                     @org.maproulette.controllers.api.ChallengeController.expandedList(id:Long, limit:Int ?= 10, page:Int ?= 0)
GET     /challenge/:cid/tasks/random                @org.maproulette.controllers.api.ChallengeController.getRandomTasks(cid:Long, s:String ?= "", tags:String ?= "", limit:Int ?= 1)
GET     /challenge/:cid/tasks/randomTasks           @org.maproulette.controllers.api.ChallengeController.getRandomTasks(cid:Long, s:String ?= "", tags:String ?= "", limit:Int ?= 1)
GET     /challenge/view/:id                         @org.maproulette.controllers.api.ChallengeController.getChallengeGeoJSON(id:Long, filter:String ?= "")
# Survey API
POST    /survey                                     @org.maproulette.controllers.api.SurveyController.create
POST    /surveys                                    @org.maproulette.controllers.api.SurveyController.batchUploadPost
PUT     /survey/:id                                 @org.maproulette.controllers.api.SurveyController.update(id:Long)
PUT     /surveys                                    @org.maproulette.controllers.api.SurveyController.batchUploadPut
GET     /survey/:id                                 @org.maproulette.controllers.api.SurveyController.read(id:Long)
GET     /project/:id/survey/:name                   @org.maproulette.controllers.api.SurveyController.readByName(id:Long, name:String)
DELETE  /survey/:id                                 @org.maproulette.controllers.api.SurveyController.delete(id:Long)
GET     /surveys/find                               @org.maproulette.controllers.api.SurveyController.find(q:String ?= "", parentId:Long ?= (-1), limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= true)
GET     /survey/:id/tags                            @org.maproulette.controllers.api.SurveyController.getTagsForSurvey(id:Long)
GET     /surveys/tags                               @org.maproulette.controllers.api.SurveyController.getItemsBasedOnTags(tags:String ?= "", limit:Int ?= 10, page:Int ?= 0)
DELETE  /survey/:id/tags                            @org.maproulette.controllers.api.SurveyController.deleteTagsFromItem(id:Long, tags:String ?= "")
GET     /surveys                                    @org.maproulette.controllers.api.SurveyController.list(limit:Int ?= 10, page:Int ?= 0)
GET     /survey/:id/tasks                           @org.maproulette.controllers.api.SurveyController.listChildren(id:Long, limit:Int ?= 10, page:Int ?= 0)
POST    /survey/:id/tasks                           @org.maproulette.controllers.api.SurveyController.createChildren(id:Long)
PUT     /survey/:id/tasks                           @org.maproulette.controllers.api.SurveyController.updateChildren(id:Long)
GET     /survey/:id/children                        @org.maproulette.controllers.api.SurveyController.expandedList(id:Long, limit:Int ?= 10, page:Int ?= 0)
GET     /survey/:cid/tasks/random                   @org.maproulette.controllers.api.SurveyController.getRandomTasks(cid:Long, s:String ?= "", tags:String ?= "", limit:Int ?= 1)
PUT     /survey/:id/task/:taskId/:answerId          @org.maproulette.controllers.api.SurveyController.answerSurveyQuestion(id:Long, taskId:Long, answerId:Long)
# Task API
POST    /task                                       @org.maproulette.controllers.api.TaskController.create
POST    /tasks                                      @org.maproulette.controllers.api.TaskController.batchUploadPost
PUT     /task/:id                                   @org.maproulette.controllers.api.TaskController.update(id:Long)
PUT     /tasks                                      @org.maproulette.controllers.api.TaskController.batchUploadPut
GET     /task/:id                                   @org.maproulette.controllers.api.TaskController.read(id:Long)
GET     /challenge/:id/task/:name                   @org.maproulette.controllers.api.TaskController.readByName(id:Long, name:String)
DELETE  /task/:id                                   @org.maproulette.controllers.api.TaskController.delete(id:Long)
GET     /tasks/find                                 @org.maproulette.controllers.api.TaskController.find(q:String ?= "", parentId:Long ?= (-1), limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= true)
GET     /task/:id/tags                              @org.maproulette.controllers.api.TaskController.getTagsForTask(id:Long)
GET     /tasks/tags                                 @org.maproulette.controllers.api.TaskController.getItemsBasedOnTags(tags:String ?= "", limit:Int ?= 10, page:Int ?= 0)
DELETE  /task/:id/tags                              @org.maproulette.controllers.api.TaskController.deleteTagsFromItem(id:Long, tags:String ?= "")
GET     /tasks/random                               @org.maproulette.controllers.api.TaskController.getRandomTasks(ps:String ?= "", cs:String ?= "", ct:String ?= "", tags:String ?= "", ts:String ?= "", limit:Int ?= 1)
PUT     /task/:id/:status                           @org.maproulette.controllers.api.TaskController.setTaskStatus(id:Long, status:Int)
# Tag API
POST    /tag                                        @org.maproulette.controllers.api.TagController.create
POST    /tags                                       @org.maproulette.controllers.api.TagController.batchUploadPost
PUT     /tag/:id                                    @org.maproulette.controllers.api.TagController.update(id:Long)
PUT     /tags                                       @org.maproulette.controllers.api.TagController.batchUploadPut
GET     /tag/:id                                    @org.maproulette.controllers.api.TagController.read(id:Long)
DELETE  /tag/:id                                    @org.maproulette.controllers.api.TagController.delete(id:Long)
GET     /tags                                       @org.maproulette.controllers.api.TagController.getTags(prefix: String ?= "", limit: Int ?= 10, page: Int ?= 0)
# Data Controller
GET     /data/challenge/:challengeId                @org.maproulette.controllers.api.DataController.getChallengeSummary(challengeId:Long)
GET     /data/challenge/:challengeId/users          @org.maproulette.controllers.api.DataController.getUserChallengeSummary(challengeId:Long, start:String ?= "", end:String ?= "", survey:Int ?= 0)
POST    /data/challenge/summary                     @org.maproulette.controllers.api.DataController.getChallengeSummaries(projectList:String ?= "")
GET     /data/user/activity                         @org.maproulette.controllers.api.DataController.getRecentUserActivity(limit:Int ?= -1, offset:Int ?= 0)
GET     /data/user/summary                          @org.maproulette.controllers.api.DataController.getUserSummary(projectList:String ?= "", start:String ?= "", end:String ?= "", survey:Int ?= 0)
GET     /data/project/activity                      @org.maproulette.controllers.api.DataController.getProjectActivity(projectList:String ?= "", start:String ?= "", end:String ?= "")
GET     /data/project/summary                       @org.maproulette.controllers.api.DataController.getProjectSummary(projectList:String ?= "")
GET     /data/challenge/:challengeId/activity       @org.maproulette.controllers.api.DataController.getChallengeActivity(challengeId:Long, start:String ?= "", end:String="")
# Handles invalid paths that use the  prefix
POST    /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
PUT     /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
GET     /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
DELETE  /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
HEAD    /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
