# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="%APPLICATION_SECRET%"
play.crypto.secret=${?MR_APPLICATION_SECRET}

# The application languages
# ~~~~~
application.langs="en,af,fr,es"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db {
  default {
    driver=org.postgresql.Driver
    url="postgres://osm:osm@localhost:5432/mr2_prod"
    url=${?MR_DATABASE_URL}
    hikaricp.connectionTestQuery="SELECT TRUE"
  }
}
play {
  evolutions.db.default {
    autoCommit = false
    autoApply = true
    autoApplyDowns = false
  }
  server.netty.transport = "native"
  # This is the max memory for post body data
  http.parser.maxDiskBuffer=15000K
  http.parser.maxMemoryBuffer=15000K
  MultipartFormData.maxLength=15000K
  http.filters="org.maproulette.filters.Filters"
  modules.enabled += "org.maproulette.jobs.JobModule"
  filters.cors {
    // CORS filters options - see https://www.playframework.com/documentation/2.5.x/CorsFilter
    pathPrefixes=["/"]
    allowedOrigins=null
    allowedHttpMethods=null
    allowedHttpHeaders=null
  }
  ws {
    useragent="MapRoulette"
    #ssl {
    #  default = true
    #  loose.acceptAnyCertificate=true
    #}
  }
}

# MapRoulette Settings
maproulette {
  version="2.1.0"
  action.level=1
  #session timeout in milliseconds, default -1 which ignores session timeouts
  session.timeout=-1
  # number of days till we reset the status if it has not been fixed
  task {
    reset = 14
    changesets {
      timeLimit="1 hour"
      enabled=false
    }
  }
  #logo="/assets/images/companylogo.png"
  signin=false
  debug=false
  devMode=false
  limits {
    challenges=3
    activities=10
    saved=5
  }
  super {
    # In general the super key should not be enabled, if it is any user with this key can access the system
    # as a super user and have full access to everything. Use with caution.
    key=""
    key=${?MR_SUPER_KEY}
    # This field will give super user access to any osm id that is in this comma seperated list automatically
    # on sign in. If the user has already signed in, the account will be updated in at least a day, or
    # the user can just click the refresh button to get it applied. Removing them from the list will remove
    # their access.
    accounts=""
    accounts=${?MR_SUPER_ACCOUNTS}
  }
  scheduler {
    cleanLocks.interval = "1 hour"
    runChallengeSchedules.interval = "24 hours"
    updateLocations.interval = "12 hours"
    cleanOldTasks {
      interval = "24 hours"
      olderThan = "31 days"
      statusFilter = [0, 3]
    }
    osmMatcher {
      interval = "24 hours"
      batchSize = 5000
      enabled = false
      manual = false
    }
    cleanDeleted.interval = "24 hours"
  }
}

osm {
  ql {
    provider="http://overpass-api.de/api/interpreter"
    timeout=120
  }
  server="http://www.openstreetmap.org"
  server=${?MR_OSM_SERVER}
  #OSM OAuth Provider
  userDetails="/api/0.6/user/details"
  requestTokenURL="/oauth/request_token"
  accessTokenURL="/oauth/access_token"
  authorizationURL="/oauth/authorize"
  callbackURL=""
  consumerKey=${MR_OAUTH_CONSUMER_KEY}
  consumerSecret=${MR_OAUTH_CONSUMER_SECRET}
}

mr3 {
  devMode=false
  host=""
  manifest="asset-manifest.json"
  manifest=${?MR3_MANIFEST_URI}
  staticPath=""
  staticPath=${?MR3_STATIC_PATH}
}

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
#logger.root=ERROR

# Logger used by the framework:
#logger.play=INFO

# Logger provided to your application:
#logger.application=DEBUG

api.version="2.0"

# Assets configuration
# ~~~~~
"assets.cache./public/AdminLTE/bootstrap.min.css"="max-age=0"
