###
# tags: [ Virtual Challenge ]
# summary: Create a Virtual Challenge
# description: Will create a new Virtual Challenge from the supplied JSON in the body.
#               When creating the Virtual Challenge, leave the ID field out of the body json,
#               if updating (generally use the PUT method) include the ID field.
# responses:
#   '200':
#     description: The newly created Virtual Challenge with a unique id.
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.models.VirtualChallenge'
#   '304':
#     description: Not updated responding with empty payload if Virtual Challenge already exists and nothing to update
#   '400':
#     description: Invalid json payload for Virtual Challenge
#   '401':
#     description: The user is not authorized to make this request
# requestBody:
#   description: The JSON structure for the Virtual Challenge body.
#   required: true
#   content:
#     application/json:
#       schema:
#         $ref: '#/components/schemas/org.maproulette.models.VirtualChallenge'
###
POST    /virtualchallenge                           @org.maproulette.controllers.api.VirtualChallengeController.create
###
# tags: [ Virtual Challenge ]
# summary: Updates a Virtual Challenge
# description: Will update an already existing Virtual Challenge from the supplied JSON in the body.
# responses:
#   '200':
#     description: The updated JSON Virtual Challenge
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.models.VirtualChallenge'
#   '304':
#     description: Not updated responding with empty payload if Virtual Challenge already exists and nothing to update
#   '400':
#     description: Invalid json payload for Virtual Challenge
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Virtual Challenge that is being updated
# requestBody:
#   description: The JSON structure for the Virtual Challenge body.
#   required: true
#   content:
#     application/json:
#       schema:
#         $ref: '#/components/schemas/org.maproulette.framework.model.Challenge'
###
PUT     /virtualchallenge/:id                       @org.maproulette.controllers.api.VirtualChallengeController.update(id:Long)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves an already existing Virtual Challenge
# description: Retrieves an already existing Virtual Challenge based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The retrieved Virtual Challenge
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.models.VirtualChallenge'
#   '404':
#     description: ID field supplied but no object found matching the id
# parameters:
#   - name: id
#     description: The id of the Virtual Challenge to retrieve
###
GET     /virtualchallenge/:id                              @org.maproulette.controllers.api.VirtualChallengeController.read(id:Long)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves an already existing Virtual Challenge
# description: Retrieves an already existing Virtual Challenge based on the name of the Virtual Challenge rather than an ID
# responses:
#   '200':
#     description: The retrieved Virtual Challenge
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.models.VirtualChallenge'
#   '404':
#     description: No Virtual Challenge found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Project of the Virtual Challenge
#   - name: name
#     in: path
#     description: The name of the Virtual Challenge being retrieved
###
GET     /virtualchallengebyname/:name                   @org.maproulette.controllers.api.VirtualChallengeController.readByName(id:Long ?= -1, name:String)
###
# tags: [ Virtual Challenge ]
# summary: Deletes an existing Virtual Challenge
# description: Deletes an existing Virtual Challenge based on the supplied ID. This will delete all associated Tasks of the Virtual Challenge.
# responses:
#   '200':
#     description: A status message containing the ID of the Virtual Challenge that was just deleted
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Virtual Challenge found matching the provided id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Virtual Challenge being deleted
#   - name: immediate
#     in: query
#     description: If set to true, will delete the virtual challenge immediately instead of delayed
###
DELETE  /virtualchallenge/:id                           @org.maproulette.controllers.api.VirtualChallengeController.delete(id:Long, immediate:Boolean ?= false)
###
# tags: [ Virtual Challenge ]
# summary: List all the Virtual Challenge.
# description: Lists all the Virtual Challenges in the system
# responses:
#   '200':
#     description: A list of all the Virtual Challenges
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.models.VirtualChallenge'
# parameters:
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /virtualchallenges                              @org.maproulette.controllers.api.VirtualChallengeController.list(limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= false)
###
# tags: [ Virtual Challenge ]
# summary: List all the Virtual Challenges Tasks.
# description: Lists all the Tasks that are children of the supplied Virtual Challenge.
# responses:
#   '200':
#     description: A list of all the Tasks
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: id
#     in: path
#     description: The project ID.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /virtualchallenge/:id/tasks                     @org.maproulette.controllers.api.VirtualChallengeController.listTasks(id:Long, limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves random Task
# description: Retrieves a random Task based on the search criteria and contained within the current Virtual Challenge
# responses:
#   '200':
#     description: The task if any is found
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: cid
#     in: path
#     description: The id of the Virtual Challenge limiting the tasks to only a descendent of that Virtual Challenge.
#   - name: proximity
#     in: query
#     description: Id of task that you wish to find the next task based on the proximity of that task
###
GET     /virtualchallenge/:cid/task                 @org.maproulette.controllers.api.VirtualChallengeController.getRandomTask(cid:Long, proximity:Long ?= -1)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves next Task
# description: Retrieves the next sequential Task based on the task ordering within the Virtual Challenge. If it is currently on the last task it will response with the first task in the Virtual Challenge.
# responses:
#   '200':
#     description: The next task in the list
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: cid
#     in: path
#     description: The id of the parent Virtual Challenge.
#   - name: id
#     in: path
#     description: The id of the current task being viewed, so that we can get context of what the next task should be
###
GET     /virtualchallenge/:cid/nextTask/:id         @org.maproulette.controllers.api.VirtualChallengeController.getSequentialNextTask(cid:Long, id:Long)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves previous Task
# description: Retrieves the previous sequential Task based on the task ordering within the Virtual Challenge. If it is currently on the first task it will response with the last task in the Virtual Challenge.
# responses:
#   '200':
#     description: The previous task in the list
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: cid
#     in: path
#     description: The id of the parent Virtual Challenge.
#   - name: id
#     in: path
#     description: The id of the current task being viewed, so that we can get context of what the next task should be
###
GET     /virtualchallenge/:cid/previousTask/:id     @org.maproulette.controllers.api.VirtualChallengeController.getSequentialPreviousTask(cid:Long, id:Long)
###
# tags: [ Virtual Challenge ]
# summary: Retrieves Virtual Challenge GeoJSON
# description: Retrieves the GeoJSON for the Virtual Challenge that represents all the associated Tasks of the Virtual Challenge.
#               WARNING* This API query can be quite slow due to retrieving all the points that is grouped in various different challenges
# responses:
#   '200':
#     description: Standard GeoJSON Virtual Challenge Geometry
#   '404':
#     description: ID field supplied but no object found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Virtual Challenge limiting the tasks to only a descendent of that Virtual Challenge.
#   - name: filter
#     in: query
#     description: Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
###
GET     /virtualchallenge/view/:id                  @org.maproulette.controllers.api.VirtualChallengeController.getVirtualChallengeGeoJSON(id:Long, filter:String ?= "")
###
# tags: [ Virtual Challenge ]
# summary: Retrieves clustered Task points
# description: Retrieves all the Tasks for a specific Virtual Challenge as clustered points to potentially display on a map.
# responses:
#   '200':
#     description: An array of clustered point representations for a Task. If none found will return an empty list
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.ClusteredPoint'
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project.
#   - name: filter
#     in: query
#     description: Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
###
GET     /virtualchallenge/clustered/:id             @org.maproulette.controllers.api.VirtualChallengeController.getClusteredPoints(id:Long, filter:String ?= "")
###
# tags: [ Virtual Challenge ]
# summary: Retrieves nearby Tasks in Virtual Challenge
# description: Retrieves tasks geographically closest to the specified task within the same Virtual Challenge
# responses:
#   '200':
#     description: The list of geographically closest tasks
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 5.
#   - name: proximity
#     in: query
#     description: Id of task around which geographically closest tasks are desired
###
GET     /virtualchallenge/:id/tasksNearby/:proximityId           @org.maproulette.controllers.api.VirtualChallengeController.getNearbyTasks(id:Long, proximityId:Long, limit:Int ?= 5)
