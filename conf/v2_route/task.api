###
# tags: [ Task ]
# summary: Retrieves a history for the task
# produces: [ application/json ]
# description: Retrieves list of task history log entries. This includes comments,
#              status actions, and review actions.
# responses:
#   '200':
#     description: List of log entries
#     schema:
#       type: object
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: id
#     in: path
#     description: The id of the task
###
GET     /task/:id/history                       @org.maproulette.controllers.api.TaskHistoryController.getTaskHistoryLog(id:Long)
###
# tags: [ Task ]
# summary: Create a Task
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create a new Task from the supplied JSON in the body. When creating the Task, leave the ID field
#               out of the body json, if updating (generally use the PUT method) include the ID field.
# responses:
#   '200':
#     description: The newly created Task with a unique id.
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '304':
#     description: Not updated responding with empty payload if Task already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Task body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
###
POST    /task                                       @org.maproulette.controllers.api.TaskController.create
###
# tags: [ Task ]
# summary: Create a batch of Tasks
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create multiple new Tasks from the JSONArray supplied in the body. Each JSON object
#               is basically a Task object that is processed similarly to the singular /sask POST. If
#               Tasks already exist with the name, they will simply be skipped, ie. not updated.
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Task already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Task body.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
###
POST    /tasks                                      @org.maproulette.controllers.api.TaskController.batchUploadPost
###
# tags: [ Task ]
# summary: Updates a Task
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update an already existing Task from the supplied JSON in the body.
# responses:
#   '200':
#     description: The updated JSON Task
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '304':
#     description: Not updated responding with empty payload if Task already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task that is being updated
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Task body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
###
PUT     /task/:id                                   @org.maproulette.controllers.api.TaskController.update(id:Long)
###
# tags: [ Task ]
# summary: Update a batch of Tasks
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update multiple already existing Tasks from the JSONArray supplied in the body. Each JSON object
#               is basically a Task object that is processed similarly to the singular /task POST. If a Task
#               does not exist it will be created from scratch
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Task already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Task body.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
###
PUT     /tasks                                      @org.maproulette.controllers.api.TaskController.batchUploadPut
###
# tags: [ Task ]
# summary: Changes status on tasks matching criteria
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will changes status on tasks that match the given search parameters.
# responses:
#   '200':
#     description: A simple OK status message with number of tasks updated.
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
PUT     /tasks/changeStatus                        @org.maproulette.controllers.api.TaskController.bulkStatusChange(newStatus:Int)
###
# tags: [ Task ]
# summary: Retrieves an already existing Task
# produces: [ application/json ]
# description: Retrieves an already existing Task based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The retrieved Task
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task to retrieve
###
GET     /task/:id                                   @org.maproulette.controllers.api.TaskController.read(id:Long)
###
# tags: [ Task ]
# summary: Start working on a Task (locks it for the user)
# produces: [ application/json ]
# description: Locks a Task based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The locked Task
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task to retrieve
###
GET     /task/:id/start                               @org.maproulette.controllers.api.TaskController.startOnTask(id:Long)
###
# tags: [ Task ]
# summary: Release a Task (unlocks it)
# produces: [ application/json ]
# description: Unlocks a Task based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The unlocked Task
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task to retrieve
###
GET     /task/:id/release                               @org.maproulette.controllers.api.TaskController.releaseTask(id:Long)
###
# tags: [ Task ]
# summary: Refresh an existing lock on a Task
# produces: [ application/json ]
# description: Refreshes an existing lock, extending its allowed duration, on the
#              task with the supplied ID. The requesting user must already own an
#              active lock on the task (i.e. via the task/:id/start API) or a 403
#              will be raised
# responses:
#   '200':
#     description: The lock was successfully refreshed
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '403':
#     description: The user does not own a lock on the task
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task on which the lock is to be refreshed
###
GET     /task/:id/refreshLock                           @org.maproulette.controllers.api.TaskController.refreshTaskLock(id:Long)
###
# tags: [ Task ]
# summary: Retrieves an already existing Task
# produces: [ application/json ]
# description: Retrieves an already existing Task based on the name of the Task rather than an ID
# responses:
#   '200':
#     description: The retrieved Task
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '404':
#     description: No Task found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Challenge of the Task
#   - name: name
#     in: path
#     description: The name of the Task being retrieved
###
GET     /challenge/:id/task/:name                   @org.maproulette.controllers.api.TaskController.readByName(id:Long, name:String)
###
# tags: [ Task ]
# summary: Deletes an existing Task
# description: Deletes an existing Task based on the supplied ID.
# responses:
#   '200':
#     description: A status message containing the ID of the Task that was just deleted
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Task found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task being deleted
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /task/:id                                   @org.maproulette.controllers.api.TaskController.delete(id:Long, immediate:Boolean ?= true)
###
# tags: [ Task ]
# summary: Find Task matching search criteria
# produces: [ application/json ]
# description: Finds a list of Tasks that match a specific search criteria. The search criteria is simply a string that is contained in the Task name. String case sensitivity is ignored.
# responses:
#   '200':
#     description: A list of Tasks found
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: q
#     in: query
#     description: The search string used to match the Task names. Default value is empty string, ie. will match everything.
#   - name: parentId
#     in: query
#     description: This limits the search to the provided challenge and no tasks outside of the provided challenge ID.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: onlyEnabled
#     in: query
#     description: Flag to set if only want to see Tasks from enabled Challenges returned. Default value is true.
###
GET     /tasks/find                                 @org.maproulette.controllers.api.TaskController.find(q:String ?= "", parentId:Long ?= -1, limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= true)
###
# tags: [ Task ]
# summary: Retrieve tags for Task
# produces: [ application/json ]
# description: Retrieves all the Tags that have been added to the specified Task
# responses:
#   '200':
#     description: A list of Tags associated with the Task. Empty array if not found.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Tag'
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task
###
GET     /task/:id/tags                              @org.maproulette.controllers.api.TaskController.getTagsForTask(id:Long)
###
# tags: [ Task ]
# summary: Retrieve Tasks based on provided tags
# produces: [ application/json ]
# description: Retrieves all the Tasks that contain at least one of the supplied tags.
# responses:
#   '200':
#     description: A list of Tasks that contain at least one of the supplied tags. An empty list otherwise.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
#   '400':
#     description: If no tags are supplied a BadRequest response will be returned
# parameters:
#   - name: tags
#     in: query
#     description: A comma separated list of tags
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /tasks/tags                                 @org.maproulette.controllers.api.TaskController.getItemsBasedOnTags(tags:String ?= "", limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Task ]
# summary: Updates Task Tags
# description: Updates the tags on the Task
# responses:
#   '304':
#     description: A basic 304 with NoContent will be returned on a successful delete
#   '400':
#     description: If no tags are supplied a BadRequest response will be returned
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task
#   - name: tags
#     in: query
#     description: A complete comma separated list of tags. If empty, then all tags will be removed.
#     required: true
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
GET  /task/:id/tags/update                              @org.maproulette.controllers.api.TaskController.updateItemTags(id:Long, tags:String ?= "")
###
# tags: [ Task ]
# summary: Delete Task Tags
# description: Deletes all the supplied tags from the Task
# responses:
#   '304':
#     description: A basic 304 with NoContent will be returned on a successful delete
#   '400':
#     description: If no tags are supplied a BadRequest response will be returned
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task
#   - name: tags
#     in: query
#     description: A comma separated list of tags
#     required: true
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /task/:id/tags                              @org.maproulette.controllers.api.TaskController.deleteTagsFromItem(id:Long, tags:String ?= "")
###
# tags: [ Task ]
# summary: Retrieves random Task
# produces: [ application/json ]
# description: Retrieves a random Task based on the search criteria.
# responses:
#   '200':
#     description: The list of tasks that match the search criteria
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: ps
#     in: query
#     description: The search string to match the names of projects to limit the Task pool from. The string is case insensitive.
#   - name: cs
#     in: query
#     description: The search string to match the names of challenges to limit the Task pool from. The string is case insensitive.
#   - name: ct
#     in: query
#     description: The challenge tags to limit the parent challenges that will limit the Task pool.
#   - name: tags
#     in: query
#     description: A comma separated list of task tags. The search will only retrieve random tasks that contain those tags
#   - name: ts
#     in: query
#     description: The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: proximity
#     in: query
#     description: Id of task that you wish to find the next task based on the proximity of that task
###
GET     /tasks/random                               @org.maproulette.controllers.api.TaskController.getRandomTasks(ps:String ?= "", cs:String ?= "", ct:String ?= "", tags:String ?= "", ts:String ?= "", limit:Int ?= 1, proximity:Long ?= -1)
###
# tags: [ Task ]
# summary: Retrieves Tasks within a bounding box
# produces: [ application/json ]
# description: Retrieves tasks within a given bounding box.
# responses:
#   '200':
#     description: The list of clusteredPoints representing Tasks that match the search criteria within the bounding box.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.ClusteredPoint'
# parameters:
#   - name: left
#     in: path
#     description: The minimum latitude for the bounding box.
#   - name: bottom
#     in: path
#     description: The minimum longitude for the bounding box.
#   - name: right
#     in: path
#     description: The maximum latitude for the bounding box.
#   - name: top
#     in: path
#     description: The maximum longitude for the bounding box.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: includeGeometries
#     in: query
#     description: Optional flag to have geometries data returned for each task.
###
PUT     /tasks/box/:left/:bottom/:right/:top        @org.maproulette.controllers.api.TaskController.getTasksInBoundingBox(left:Double, bottom:Double, right:Double, top:Double, limit:Int ?= 10000, page:Int ?= 0, excludeLocked:Boolean ?= false, sort:String ?= "", order:String ?= "ASC", includeTotal:Boolean ?= false, includeGeometries:Boolean ?=false)
###
# tags: [ Task ]
# summary: Update Task Changeset
# produces: [ application/json ]
# description: Will update the changeset of the task. It will do this by attempting to match the OSM changeset to the Task based on the geometry and the time that the changeset was executed.
# responses:
#   '200':
#     description: The task that was updated. With the updated changeset value
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Task'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: id
#     in: path
#     description: The ID of the task
###
PUT     /task/:id/changeset                         @org.maproulette.controllers.api.TaskController.matchToOSMChangeSet(id:Long)
###
# tags: [ Task ]
# summary: Update Task Status
# produces: [ application/json ]
# description: Will update a Tasks status to one of the following. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
# responses:
#   '304':
#     description: No Content, update successful
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: id
#     in: path
#     description: The ID of the task
#   - name: status
#     in: path
#     description: The status to update the Task too. Following status Integers can be used. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
#   - name: comment
#     in: query
#     description: Any comment that is provided by the user when setting the status
#   - name: requestReview
#     in: query
#     description: Boolean indicating if a review is requested on this task. (Will override user settings if provided)
#   - name: tags
#     in: query
#     description: Optional tags to associate with this task
#   - name: completionResponses
#     in: body
#     description: Optional key/value json to be stored with this task.
###
PUT     /task/:id/:status                           @org.maproulette.controllers.api.TaskController.setTaskStatus(id:Long, status:Int, comment:String ?= "", tags:String ?="")
###
# tags: [ Task ]
# summary: Update Bundle Task Status
# produces: [ application/json ]
# description: Will update a Bundled list of Tasks statuses to one of the following. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
# responses:
#   '200':
#     description: TaskBundle
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The bundle or primary task was not found with the supplied Id.
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: bundleId
#     in: path
#     description: The ID of the bundle
#   - name: primaryId
#     in: path
#     description: The primary ID of the task for this bundle
#   - name: status
#     in: path
#     description: The status to update the Task too. Following status Integers can be used. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
#   - name: comment
#     in: query
#     description: Any comment that is provided by the user when setting the status
#   - name: requestReview
#     in: query
#     description: Boolean indicating if a review is requested on this task. (Will override user settings if provided)
#   - name: tags
#     description: Optional tags to associate with this task
###
PUT     /taskBundle/:bundleId/:status                           @org.maproulette.controllers.api.TaskBundleController.setBundleTaskStatus(bundleId:Long, primaryId:Long, status:Int, comment:String ?= "", tags:String ?="")
###
# tags: [ Task ]
# summary: Update Task Review Status
# produces: [ application/json ]
# description: Will update a Tasks review status to one of the following. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
# responses:
#   '200':
#     description: No Content, update successful
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: id
#     in: path
#     description: The ID of the task
#   - name: status
#     in: path
#     description: The status to update the Task to. Following status Integers can be used. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
#   - name: comment
#     in: query
#     description: Any comment that is provided by the user when setting the review status
#   - name: tags
#     description: Optional tags to associate with this task
###
PUT     /task/:id/review/:status                           @org.maproulette.controllers.api.TaskController.setTaskReviewStatus(id:Long, status:Int, comment:String ?= "", tags:String ?="")
###
# tags: [ Task ]
# summary: Changes review status to "Unnecessary" on tasks matching criteria
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will change review status on tasks that match the given search parameters
#              indicating the tasks do not need a review.
# responses:
#   '200':
#     description: A simple OK status message with number of tasks updated.
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: task ids
#     description: Task ids to change (OR search parameters can be used instead)
###
PUT     /tasks/review/remove                               @org.maproulette.controllers.api.TaskController.removeReviewRequest(ids:String?="")
###
# tags: [ Task ]
# summary: Update Task Review Status for a Bundle
# produces: [ application/json ]
# description: Will update a Tasks review status to one of the following. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
# responses:
#   '200':
#     description: Task Bundle
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: id
#     in: path
#     description: The ID of the bundle
#   - name: status
#     in: path
#     description: The status to update the Task to. Following status Integers can be used. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
#   - name: comment
#     in: query
#     description: Any comment that is provided by the user when setting the review status
#   - name: tags
#     description: Optional tags to associate with this task
###
PUT     /taskBundle/:id/review/:status                     @org.maproulette.controllers.api.TaskBundleController.setBundleTaskReviewStatus(id:Long, status:Int, comment:String ?= "", tags:String ?="")
###
# tags: [ Task ]
# summary: Retrieves task clusters.
# produces: [ application/json ]
# description: Retrieves task clusters that contain the centroid location for a group of tasks
# responses:
#   '200':
#     description: An array of task clusters that represents clusters of tasks for a challenge. If none found will return an empty list.
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.TaskCluster'
# parameters:
#   - name: points
#     in: query
#     description: The number of clusters that you want returned
###
PUT     /taskCluster                                @org.maproulette.controllers.api.TaskController.getTaskClusters(points:Int ?= 100)
###
# tags: [ Task ]
# summary: Retrieves Tasks within a bounding box
# deprecated: true
###
GET     /tasks/box/:left/:bottom/:right/:top        @org.maproulette.controllers.api.TaskController.getTasksInBoundingBox(left:Double, bottom:Double, right:Double, top:Double, limit:Int ?= 10000, page:Int ?= 0, excludeLocked:Boolean ?= false, sort:String ?= "", order:String ?= "ASC", includeTotal:Boolean ?= false, includeGeometries:Boolean ?=false)
###
# tags: [ Task ]
# summary: Retrieves task clusters. USE PUT METHOD
# deprecated: true
###
GET     /taskCluster                                @org.maproulette.controllers.api.TaskController.getTaskClusters(points:Int ?= 100)
