###
# tags: [ Comment ]
# summary: Retrieves a comment
# produces: [ application/json ]
# description: Retrieves a comment based on a specific ID.
# responses:
#   '200':
#     description: The comment
#     schema:
#       $ref: '#/definitions/org.maproulette.framework.model.Comment'
#   '404':
#     description: If the comment is not found
# parameters:
#   - name: id
#     in: path
#     description: The ID for the comment
###
GET     /comment/:id                                @org.maproulette.framework.controller.CommentController.retrieve(id:Long)
###
# tags: [ Comment ]
# summary: Retrieves comments for a Task
# produces: [ application/json ]
# description: Retrieves all the comments for a specific Task
# responses:
#   '200':
#     description: The comments
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.framework.model.Comment'
#   '404':
#     description: If the Task is not found
# parameters:
#   - name: id
#     in: path
#     description: The ID for the Task
###
GET     /task/:id/comments                          @org.maproulette.framework.controller.CommentController.find(id:Long)
###
# tags: [ Comment ]
# summary: Adds comment to Task
# description: Adds a comment to a Task
# responses:
#   '201':
#     description: The comment that was added with the new ID
#     schema:
#       $ref: '#/definitions/org.maproulette.framework.model.Comment'
#   '404':
#     description: If the Task is not found
# parameters:
#   - name: id
#     in: path
#     description: The ID for the Task
#   - name: comment
#     in: query
#     description: A URLEncoded comment for the Task
#   - name: actionId
#     in: query
#     description: An optional action ID that may be associated with the comment
###
POST    /task/:id/comment                           @org.maproulette.framework.controller.CommentController.add(id:Long, comment:String, actionId:Option[Long])
###
# tags: [ Comment ]
# summary: Adds comment to each Task in a Task Bundle
# description: Adds a comment to each Task in Bundle
# responses:
#   '201':
#     description: The task bundle
#     schema:
#       $ref: '#/definitions/TaskBundle'
#   '404':
#     description: If the bundle is not found
# parameters:
#   - name: id
#     in: path
#     description: The ID for the bundle
#   - name: comment
#     in: query
#     description: A URLEncoded comment for the Task
#   - name: actionId
#     in: query
#     description: An optional action ID that may be associated with the comment
###
POST    /taskBundle/:id/comment                     @org.maproulette.framework.controller.CommentController.addToBundleTasks(id:Long, comment:String, actionId:Option[Long])
###
# tags: [ Comment ]
# summary: Update comment on Task
# description: Updates an existing comment on a Task. Only the original user who made the comment or a SuperUser can update the comment
# responses:
#   '200':
#     description: The comment that was added with the new ID
#     schema:
#       $ref: '#/definitions/org.maproulette.framework.model.Comment'
#   '401':
#     description: If the user is not the original user who made the comment or a super user
#   '404':
#     description: If the Task is not found
# parameters:
#   - name: commentId
#     in: path
#     description: The ID of the original comment
#   - name: comment
#     in: query
#     description: A URLEncoded comment for the Task
###
PUT    /comment/:commentId                          @org.maproulette.framework.controller.CommentController.update(commentId:Long, comment:String)
###
# tags: [ Comment ]
# summary: Deletes comment from Task
# description: Deletes a comment from the specific Task
# responses:
#   '200':
#     description: The deletion was successful
#   '404':
#     description: If the Task or Comment is not found
# parameters:
#   - name: id
#     in: path
#     description: The ID for the Task
#   - name: commentId
#     in: path
#     description: The ID for the Comment
###
DELETE  /task/:id/comment/:commentId                @org.maproulette.framework.controller.CommentController.delete(id:Long, commentId:Long)
